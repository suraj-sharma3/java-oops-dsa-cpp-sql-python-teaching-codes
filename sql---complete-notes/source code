/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int main()
{
    printf("Hello World");

    return 0;
}
/*

1) Select all the different values from the Country column in the Customers table.

SELECT DISTINCT Country FROM Customers;

The data in RDBMS is stored in database objects called tables. 
A table is a collection of related data entries and it consists of columns and rows.

A field is a column in a table that is designed to maintain specific information about every record in the table.

A record, also called a row, is each individual entry that exists in a table. A record is a horizontal entity in a table.

A column is a vertical entity in a table that contains all information associated with a specific field in a table.

A database most often contains one or more tables. Each table is identified by a name (e.g. "Customers" or "Orders"). 
Tables contain records (rows) with data.

Most of the actions you need to perform on a database are done with SQL statements.

The following SQL statement selects all the records in the "Customers" table:
SELECT * FROM Customers;

SQL keywords are NOT case sensitive: select is the same as SELECT

Some database systems require a semicolon at the end of each SQL statement.

Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.


The SELECT statement is used to select data from a database.

The data returned is stored in a result table, called the result-set.

SELECT column1, column2, ...
FROM table_name;

SELECT * FROM table_name;

use PascalCasing for names consisting of more than 1 word.


The SELECT DISTINCT statement is used to return only distinct (different) values.

Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.

SELECT DISTINCT column1, column2, ...
FROM table_name;


The WHERE clause is used to filter records.

It is used to extract only those records that fulfill a specified condition.

WHERE Syntax :

SELECT column1, column2, ...
FROM table_name
WHERE condition;

SELECT * FROM Customers
WHERE Country='Mexico';

SQL requires single quotes around text values (most database systems will also allow double quotes).
However, numeric fields should not be enclosed in quotes:

SELECT * FROM Customers
WHERE CustomerID=1;

Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.

The following operators can be used in the WHERE clause:

=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be written as !=	

BETWEEN	: Between a certain range	
LIKE : Search for a pattern	
IN : To specify multiple possible values for a column


The SQL AND, OR and NOT Operators
The WHERE clause can be combined with AND, OR, and NOT operators.

The AND and OR operators are used to filter records based on more than one condition:

The AND operator displays a record if all the conditions separated by AND are TRUE.
The OR operator displays a record if any of the conditions separated by OR is TRUE.
The NOT operator displays a record if the condition(s) is NOT TRUE.

AND Syntax : 
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;

The following SQL statement selects all fields from "Customers" where country is "Germany" AND city is "Berlin":

Example :
SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin';

OR Syntax : 
SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;

The following SQL statement selects all fields from "Customers" where country is "Germany" OR "Spain":

Example :
SELECT * FROM Customers
WHERE Country='Germany' OR Country='Spain';


NOT Syntax : 
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

The following SQL statement selects all fields from "Customers" where country is NOT "Germany":

Example :
SELECT * FROM Customers
WHERE NOT Country='Germany';

The following SQL statement selects all fields from "Customers" where country is "Germany" AND city must be "Berlin" OR "München" (use parenthesis to form complex expressions):

Example :
SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='München');

The following SQL statement selects all fields from "Customers" where country is NOT "Germany" and NOT "USA":

Example :
SELECT * FROM Customers
WHERE NOT Country='Germany' AND NOT Country='USA';


The SQL ORDER BY Keyword : 
The ORDER BY keyword is used to sort the result-set in ascending or descending order.

The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

ORDER BY Syntax : 

SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

SELECT * FROM Customers
ORDER BY Country, CustomerName;

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;

SELECT * FROM Customers
ORDER BY Country DESC;


The INSERT INTO statement is used to insert new records in a table.

INSERT INTO Syntax :
It is possible to write the INSERT INTO statement in two ways:

1. Specify both the column names and the values to be inserted:

INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:

INSERT INTO table_name
VALUES (value1, value2, value3, ...);

The column which is an auto-increment field will be generated automatically when a new record is inserted into the table.

INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');

Select all records from the Customers table, sort the result alphabetically, first by the column Country, then, by the column City.

SELECT * FROM Customers
ORDER BY Country,City;


What is a NULL Value?
A field with a NULL value is a field with no value.

If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.

Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!


We will have to use the IS NULL and IS NOT NULL operators to test for NULL values : 

IS NULL Syntax : 
SELECT column_names
FROM table_name
WHERE column_name IS NULL;

IS NOT NULL Syntax : 
SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;

The IS NULL operator is used to test for empty values (NULL values).

The following SQL lists all customers with a NULL value in the "Address" field:

Example :
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;

Tip: Always use IS NULL to look for NULL values.

The IS NOT NULL Operator
The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).

The following SQL lists all customers with a value in the "Address" field:

Example : 
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;

The UPDATE statement is used to modify the existing records in a table.

UPDATE Syntax : 

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!

UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;

It is the WHERE clause that determines how many records will be updated.

The following SQL statement will update the ContactName to "Juan" for all records where country is "Mexico":

Example : 
UPDATE Customers
SET ContactName='Juan'
WHERE Country='Mexico';

Be careful when updating records. If you omit the WHERE clause, ALL records will be updated!

Example :
UPDATE Customers
SET ContactName='Juan';

Update the City value and the Country value :

UPDATE Customers
SET City = 'Oslo',
Country = 'Norway'
WHERE CustomerID = 32;

The DELETE statement is used to delete existing records in a table.

DELETE Syntax : 
DELETE FROM table_name WHERE condition;

Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. 
The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!

The following SQL statement deletes the customer "Alfreds Futterkiste" from the "Customers" table:

Example : 
DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

Delete All Records
It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:

DELETE FROM table_name;
The following SQL statement deletes all rows in the "Customers" table, without deleting the table:

Example : 
DELETE FROM Customers;

MySQL supports the LIMIT clause to select a limited number of records.

SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;

SELECT * FROM Customers
LIMIT 3;

SELECT * FROM Customers
WHERE Country='Germany'
LIMIT 3;


The SQL MIN() and MAX() Functions
The MIN() function returns the smallest value of the selected column.

The MAX() function returns the largest value of the selected column.

MIN() Syntax :

SELECT MIN(column_name)
FROM table_name
WHERE condition;

MAX() Syntax : 

SELECT MAX(column_name)
FROM table_name
WHERE condition;

SELECT MIN(Price) AS SmallestPrice
FROM Products;

SELECT MAX(Price) AS LargestPrice
FROM Products;

The COUNT() function returns the number of rows that matches a specified criterion.

COUNT() Syntax : 

SELECT COUNT(column_name)
FROM table_name
WHERE condition;
The AVG() function returns the average value of a numeric column. 

AVG() Syntax :

SELECT AVG(column_name)
FROM table_name
WHERE condition;
The SUM() function returns the total sum of a numeric column. 

SUM() Syntax : 

SELECT SUM(column_name)
FROM table_name
WHERE condition;


The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards often used in conjunction with the LIKE operator:

The percent sign (%) represents zero, one, or multiple characters
The underscore sign (_) represents one, single character
Note: MS Access uses an asterisk (*) instead of the percent sign (%), and a question mark (?) instead of the underscore (_).

The percent sign and the underscore can also be used in combinations!

LIKE Syntax : 

SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;
Tip: You can also combine any number of conditions using AND or OR operators.

The following SQL statement selects all customers with a CustomerName starting with "a":

Example : 
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';

The following SQL statement selects all customers with a CustomerName ending with "a":

Example :
SELECT * FROM Customers
WHERE CustomerName LIKE '%a';

The following SQL statement selects all customers with a CustomerName that starts with "a" and are at least 3 characters in length:

Example : 
SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%';

The following SQL statement selects all customers with a ContactName that starts with "a" and ends with "o":

Example :
SELECT * FROM Customers
WHERE ContactName LIKE 'a%o';

The following SQL statement selects all customers with a CustomerName that does NOT start with "a":

Example : 
SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%';

Select all records where the value of the City column starts with letter "a" and ends with the letter "b".

SELECT * FROM Customers
WHERE City LIKE 'a%b';


The following SQL statement selects all customers with a City starting with "ber":

Example : 
SELECT * FROM Customers
WHERE City LIKE 'ber%';

The following SQL statement selects all customers with a City containing the pattern "es": 

Example :
SELECT * FROM Customers
WHERE City LIKE '%es%';

The following SQL statement selects all customers with a City starting with any character, followed by "ondon":

Example :
SELECT * FROM Customers
WHERE City LIKE '_ondon';

The following SQL statement selects all customers with a City starting with "L", followed by any character, followed by "n", followed by any character, followed by "on":

Example : 
SELECT * FROM Customers
WHERE City LIKE 'L_n_on';

The following SQL statement selects all customers with a City starting with "b", "s", or "p":

Example :
SELECT * FROM Customers
WHERE City LIKE '[bsp]%';

The following SQL statement selects all customers with a City starting with "a", "b", or "c":

Example :
SELECT * FROM Customers
WHERE City LIKE '[a-c]%';


The two following SQL statements select all customers with a City NOT starting with "b", "s", or "p":

Example :
SELECT * FROM Customers
WHERE City LIKE '[!bsp]%';

Or

Example :
SELECT * FROM Customers
WHERE City NOT LIKE '[bsp]%';